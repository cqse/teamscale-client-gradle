apply plugin: "com.teamscale.gradle"

teamscale {
	server {
		url = "url"
		username = "user"
		accesskey = "token"
		project = "project"
	}

	azureDevOps {
		cacheDir "path-to-cache-dir" // directory must exist
		codeCoverageExe "path-to-code-coverage-exe" // necessary for any test coverage with the type VS_COVERAGE

		credentials {
			"apps-munichre" {
				username = "token"
				password = "tokentoken"
			}

			"additional" {
				username = "token"
				password = "tokentoken"
			}
		}

		builds {
			"apps-munichre" {
				"TQE" {
					"SampleApp" {
						// Maximum number of days after the lastest build until a warning is logged
						// Default is 30, meaning if a build hasn't been done for this definition in the last 30 days
						// a warning will be logged the next time any ADOS task is executed on this project.
						maxDaysBetweenBuilds = 30

						// Base name for the partition where the results are being uploaded to.
						// Every definition should have its own partition. Especially because in the future more
						// definition might come.
						partition = "SampleApp"

						tests {
							// ### Configuration of test results and coverage ###
							// both `result`, `coverage`, `release` work similar
							// result/coverage type, file-regex, artifact-regex
							//
							// type		 		A teamscale EReportFormat.java type. If the type is wrong the upload will fail
							//
							// file-regex		A regex matching the file name. Can also be an ant-pattern, e.g. **.trx. If
							//					an artifact-regex is given this must match a complete path not just the name
							// 					of the file.
							//					If the artifact-regex is not given then the coverage must be published in the
							//					"Coverage" tab in a build or in the test runs attachments
							//					The results files must be found in the attachments of the test runs
							//					(Filters must be cleared in order to see test runs which have not failed)
							//
							// artifact-regex	(Optional) Regex matching a published artifact. If the regex matches the name of
							//					the artifact the coverage/results are files inside of the artifact matched by the
							//					file-regex
							result "MS_TEST", "**/*.trx"
							coverage "VS_COVERAGE", /.*\.coverage/

							// Checks if there are any release test results for the build. Only the latest build will be
							// checked continuously for new releases. The intial execution will of course check all recent builds,
							// but after a build has been processed, besides the latest, it will not be looked at again.
							release "MS_TEST", /.*\.trx/
						}
					}

					"WebGoat.NET" {
						partition = "Webgoat"

						// ### Configuration for the upload of build findings ###
						// parselogs (parser-type, log-name-pattern)
						//
						// parser-type	 		See ELogAnalyzerType.groovy for implemented types
						//
						// log-name-pattern		Every build consists of different tasks which are executed one after
						// 						the	other. Insert a regex pattern here which matches all task names whose logs should be parsed.
						parseLogs "CSHARP", /Build.*/

						tests {
							result "MS_TEST", "**/*.trx", /drop/
						}
					}
				}
			}
		}
	}
}