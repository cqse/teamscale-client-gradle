apply from: "$rootDir/gradle/base-teamscale.gradle"

// TODO find a way to general import buildscript deps...
buildscript {
	dependencies {
		classpath fileTree("$rootDir/gradle/lib").include("**.jar")
	}
}

///////  Configuration

ext {
	report = [
		// E.g. file share where traces are copied after test execution (dir may be null to disable inbox and work on store directly, this is however not recommended)
		inbox: [
			// The trace inbox location.
			dir: null,
			
			// The trace include pattern, defaults to txt files.
			includes: ["**/*.xml"],
			
			// Optional file pattern excludes.
			excludes: [],
			
			// Optional further filtering.
			filter: { file -> true },

			// Whether the files should be copied flat or in an hierarchical structure
			copyFlat: false,

			// TODO docs, move to TGA as well
			subdir: { reportFile, inboxDir -> report.inbox.copyFlat ? null : stripPathPrefix(reportFile.parent, inboxDir) }
		],
		
		// Directory where unprocessed traces are located. If a inbox is defined, the traces are moved from the inbox into this folder.
		store: [
			// The trace store location.
			dir: null,
			
			// The trace include pattern, defaults to txt files.
			includes: ["**/*.xml"],
			
			// Optional file pattern excludes.
			excludes: [],
			
			// Optional further filtering.
			filter: { file -> true }
		],
		
		upload: [
			format: { format -> "" },
			
			// A closure that calculates the timestamp of when the trace was created (default: modification date).
			timestamp: { file -> file.lastModified() },

			message: { reportFile -> report.upload.partition(reportFile) + ": ${reportFile.name}" },

			partition: { reportFile -> "External Upload" }
		],
		
		// Directory where traces are archived (in a subfolder corresponding to the version)
		archive: [ dir: null ]
	]
}

///////  Report Handling

task collectReport {
	doLast {
		if (report.inbox.dir == null) {
			println "No report inbox defined, skipping"
			return
		}
		
		report.inbox.dir = wrapAsArray(report.inbox.dir)
		
		report.inbox.dir.each {inboxDir ->
			fileTreeFiltered(inboxDir, report.inbox).files.each { reportFile ->
			def toDir = report.store.dir
				def subdir = report.inbox.subdir(reportFile, inboxDir)
				if (subdir?.trim()) {
					toDir += "/" + subdir
			}
			ant.move(file: reportFile, toDir: toDir, preservelastmodified: true, failonerror: false)
		}
	}
}
}

task uploadReport(dependsOn: collectReport) {
	doLast {
		assert file(report.store.dir).exists()
		
		def http = teamscale.httpClient(teamscale)
		def sortedReports = fileTreeFiltered(report.store.dir, report.store).files.sort{ it.lastModified() }
		println "Uploading report to project $teamscale.project"
		sortedReports.each { reportFile ->
			def timestamp = report.upload.timestamp(reportFile)
			
			println "  -> $reportFile.name"
			println "     ... for timestamp $timestamp"
			if (teamscale.dryRun) {
				println "     ... in DRY-RUN mode"
				return
			}
			
			try {
				println "     -> " + http.post(String) {
				    request.uri.path = "/p/${teamscale.project}/external-report"
				    request.contentType = 'multipart/form-data'
				    request.uri.query = [
					    t: timestamp,
					    format: report.upload.format(reportFile),
					    adjusttimestamp: true,
					    message: report.upload.message(reportFile),
					    partition: report.upload.partition(reportFile)
				    ]
				    request.body = groovyx.net.http.MultipartContent.multipart {
					    part 'report', reportFile.name, 'text/plain', reportFile
				    }
				    request.encoder 'multipart/form-data', groovyx.net.http.OkHttpEncoders.&multipart
			   	}
			} catch(e) {
				println "     -> Skipped ($e)"
				return
			}
			
			def toDir = "$report.archive.dir/" + stripPathPrefix(reportFile.parent, report.store.dir)
			ant.move(file: reportFile, todir: toDir, preservelastmodified: true)
		}
	
	}
}