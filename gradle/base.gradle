buildscript {
	dependencies {
		classpath fileTree("$rootDir/gradle/lib").include("**.jar")
	}
}

import java.nio.file.Files
import java.nio.file.Path
ext {
	appendLine = { file, line ->
		if (line.endsWith("\n")) {
			line += "\r\n"
		}
		
		if (!file.exists()) {
			file.text = line
		} else {
			if (file.text.endsWith("\n")) {
				file.append("\r\n")
			}
			file.append(line)
		}
	}
	
	fileTreeFiltered = { dir, config ->
		if (config.subdir) {
			dir = file("$dir/${config.subdir}")
		}
		fileTree(dir: dir, includes: config.includes, excludes: config.excludes).filter(config.filter)
	}

	getFileVersion = { file, attribute = 'FileVersion' ->
		new ByteArrayOutputStream().withStream { os ->
			exec {
				commandLine "Powershell", "(get-item '$file').VersionInfo.$attribute"
				standardOutput = os
			}
			os.toString().trim()
		}
	}
	
	isDotNetPdb = { file ->
		def lines = new ByteArrayOutputStream().withStream { os ->
			exec {
				commandLine "$rootDir/gradle/bin/cvdump.exe", "-id", file
				standardOutput = os
			}
			os.toString().readLines()
		}
		
		return !lines.any{it.startsWith('0x')}
	}

	stripPathPrefix = { path, prefix ->
		def norm = { p ->
			p.tr('A-Z\\', 'a-z/')
		}

		path = path as String
		prefix = prefix as String
		if (norm(path).startsWith(norm(prefix))) {
			path = path.substring(prefix.length())
			if (path.startsWith('/') || path.startsWith('\\')) {
				path = path.substring(1)
			} 
		}
		
		return path
	}
	
	/** Wraps an object as and array unless it is already iterable (having an each method). */
	wrapAsArray = { objectOrArray ->
		if (!objectOrArray.metaClass.respondsTo(objectOrArray, "each")) {
			objectOrArray = [objectOrArray]
		}
		
		return objectOrArray
	}

	convertVsCoverageXml = { files, output=null ->

		Path xml = output ?: Files.createTempFile("vscoverage", ".xml")

		def codeCoverageExe = "$rootDir/gradle/bin/CodeCoverage/CodeCoverage.exe"
		assert file(codeCoverageExe).exists()

		try {
			// file must not exist, otherwise nothing will be written to it
			Files.deleteIfExists(xml)

			List<String> coverageFiles = files.collect { "\"$it.absolutePath\"" as String }
			def command = (["cmd", "/C", "\"\"$codeCoverageExe\"", "analyze", "/output:\"$xml.absolutePath\""]
				+ coverageFiles
				+ ["\""]).execute()

			def errorStream = new StringBuffer()
			command.waitForProcessOutput(null, errorStream)

			assert errorStream.size() == 0 : "Converting the coverage file failed: $errorStream"
			assert (Files.exists(xml) && xml.text.size() > 0) : "Conversion of the coverage files to $xml.path did not work. Consider using MS_COVERAGE instead, because the coverage files might be in an older format."

			return xml.text
		} finally {
			// prevent clogging of the temp dir
			if (output == null) {
				Files.deleteIfExists(xml)
			}
		}
	}
}
