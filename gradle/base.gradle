buildscript {
	dependencies {
		classpath fileTree("$rootDir/gradle/lib").include("**.jar")
	}
}

ext {
	appendLine = { file, line ->
		if (line.endsWith("\n")) {
			line += "\r\n"
		}
		
		if (!file.exists()) {
			file.text = line
		} else {
			if (file.text.endsWith("\n")) {
				file.append("\r\n")
			}
			file.append(line)
		}
	}
	
	fileTreeFiltered = { dir, config ->
		if (config.subdir) {
			dir = file("$dir/${config.subdir}")
		}
		fileTree(dir: dir, includes: config.includes, excludes: config.excludes).filter(config.filter)
	}

	getFileVersion = { file, attribute = 'FileVersion' ->
		new ByteArrayOutputStream().withStream { os ->
			exec {
				commandLine "Powershell", "(get-item '$file').VersionInfo.$attribute"
				standardOutput = os
			}
			os.toString().trim()
		}
	}
	
	isDotNetPdb = { file ->
		def lines = new ByteArrayOutputStream().withStream { os ->
			exec {
				commandLine "D:/teamscale/scripts/gradle/bin/cvdump.exe", "-id", file
				standardOutput = os
			}
			os.toString().readLines()
		}
		
		return !lines.any{it.startsWith('0x')}
	}

	stripPathPrefix = { path, prefix ->
		def norm = { p ->
			p.tr('A-Z\\', 'a-z/')
		}

		path = path as String
		prefix = prefix as String
		if (norm(path).startsWith(norm(prefix))) {
			path = path.substring(prefix.length())
			if (path.startsWith('/') || path.startsWith('\\')) {
				path = path.substring(1)
			} 
		}
		
		return path
	}
}
